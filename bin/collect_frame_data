#!/usr/bin/env ruby
script_path = __FILE__
script_path = File.readlink(script_path) if File.symlink?(script_path)

$: << File.join(File.dirname(script_path), '../lib')

require 'rubygems'
require 'fastercsv'

require 'find'
require 'yaml'
require 'mp3info'
require 'mp3excerpter'

TARGET_DIRECTORY = "./frame_data"

output_directory = "#{TARGET_DIRECTORY}_#{Time.now.strftime("%Y%m%d%H%M")}"

unless File.exist?(output_directory)
  $stderr.puts("#{File.expand_path(output_directory)} does not exist, creating it.\n\n")
  FileUtils.mkdir(output_directory)
end

frame_counts = {}
first_seen = {}
excerpted_files = {}
exceptions = {}
broken_id3v2_frames = []

ARGV.each do |root|
  Find.find(root) do |path|
    if '.mp3' == File.extname(path).downcase
      $stderr.puts("        P: #{path}.")
      begin
        Mp3Info.open(path) do |mp3|
          if mp3.has_id3v2_tag?
            broken_id3v2_frames << path if !mp3.id3v2_tag.valid_frame_sizes?
            
            mp3.id3v2_tag.keys.each do |key|
              unless frame_counts[key]
                frame_counts[key] = 1
                first_seen[key] = path
                unless excerpted_files.keys.include?(path)
                  excerpted_files[path] = MP3Excerpter.new(path, "#{output_directory}/new_frames").dump_excerpt
                end
              else
                frame_counts[key] += 1
              end
            end
          end
        end
      rescue Exception => cause
        unless excerpted_files.keys.include?(path)
          $stderr.puts "WARN: Mp3Info barfed (#{cause}). Dumping #{path}."
          excerpted_files[path] = MP3Excerpter.new(path, "#{output_directory}/errors").dump_excerpt
          exceptions[path] = cause
        else
          $stderr.puts "WARN: Mp3Info barfed: #{cause}"
        end
      end
    end
  end
end

puts "Writing dump of where a frame was first seen."
File.open("#{output_directory}/first_seen.yaml", 'w') { |io| YAML.dump(first_seen, io) }

puts "Writing dump of how many instances of a frame were seen."
File.open("#{output_directory}/frame_counts.yaml", 'w') { |io| YAML.dump(frame_counts, io) }

puts "Writing spreadsheet of denormalized frame statistics."
FasterCSV.open("#{output_directory}/frame_statistics.csv", 'w') do |csv|
  first_seen.keys.each do |key|
    csv << [key, first_seen[key], frame_counts[key], excerpted_files[first_seen[key]]]
  end
end

if excerpted_files.size > 0
  puts "Writing dump of how many files were excerpted."
  File.open("#{output_directory}/excerpted_files.yaml", 'w') { |io| YAML.dump(excerpted_files, io) }

  FasterCSV.open("#{output_directory}/excerpted_files.csv", 'w') do |csv|
    excerpted_files.keys.each do |path|
      csv << [path, excerpted_files[path]]
    end
  end
end

if exceptions.size > 0
  puts "Writing spreadsheet of exceptions for files."
  FasterCSV.open("#{output_directory}/exceptions.csv", 'w') do |csv|
    exceptions.keys.each do |path|
      csv << [path, exceptions[path].to_s]
    end
  end
end

if broken_id3v2_frames.size > 0
  puts "Writing dump of files with ID3v2.4.0 tags with invalid frame sizes."
  File.open("#{output_directory}/broken_frame_headers.yaml", 'w') { |io| YAML.dump(broken_id3v2_frames, io) }
end

puts "Frame identifiers found:\n\n"

first_seen.sort.each do |seen|
  puts "#{frame_counts[seen[0]]} x #{seen[0]} (first seen in #{seen[1]})"
end
